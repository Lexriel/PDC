#ifndef _TREE_H_
#define _TREE_H_ 1

#include "list.h"

/* node */
struct node_m
{
  /* a value */
  void *value;
  /* his sons */
  list_t sons;
};
typedef struct node_m *node_t;

/* tree */
struct tree_m
{
  /* first node of the tree */
  node_t root;
  /* size of the nodes value */
  int value_size;
  /* function to free nodes value */
  void(*free_value)(void *ptr);
};
typedef struct tree_m *tree_t;

typedef node_t treeiterator_t;

/*
  creates a new tree:
  [value_size] is the size of the values
  [free_value] is the free values function
  (default is void *free(void *ptr)  from stdlib.h)
*/
extern tree_t
newTree (int value_size);
extern tree_t
newTreeFreeFun (int value_size, void(*free_value)(void *ptr));

/*
  tests if the tree [t] is empty
  - 1 : empty
  - 0 : not empty
  - -1 : tree does not exists
*/
extern int
isEmptyTree (tree_t t);

/*
  tests if the iterator [i] is on a leaf (doesn't have any sons)
*/
extern int
isTreeIteratorLeaf (treeiterator_t i);

/*
  deletes the tree [t] with all its links
  - 0 : deleted
  - -1 : tree does not exists  
*/
extern int
deleteTree (tree_t *t);

/*
  same as deleteTree but does not return anything
*/
extern void
clearTree (void *tree);

/*
  returns a new iterator which point at the first value
  of the tree [t]
  returns NULL if tree is empty or not created
*/
extern treeiterator_t
getTreeIterator (tree_t t);

/*
  clones *[value] and creates the tree [t]'s root
  returns:
  - 0 : OK
  - -1 : tree does not exists
*/
extern int
setTreeRootValue (tree_t *t, void *value);

/*
  clones *[value] and creates a new sons in the tree
  at the iterator [i]. the value size is taken from
  the source tree [t].
  returns:
  - 0 : OK
  - -1 : iterator is empty
  - -2 : tree does not exists
*/
extern int
addTreeIteratorSonValue (tree_t t,treeiterator_t i, void *value);

/*
  returns the value at the tree iterator [i]
*/
extern void *
getTreeIteratorValue (treeiterator_t i);

/*
  moves the tree iterator [i] to the [index]th son (starting at 0),
  [i] becomes NULL if [index] is pointing on nothing.
  changes and returns the iterator [i]
*/
extern treeiterator_t
moveTreeIteratorAtSon (treeiterator_t *i, int index);

/*
  returns the number of sons from an iterator [i]
  or returns -1 if the iterator does not exists
*/
extern int
getTreeIteratorSonsNumber (treeiterator_t i);


#endif /* _TREE_H_ */
