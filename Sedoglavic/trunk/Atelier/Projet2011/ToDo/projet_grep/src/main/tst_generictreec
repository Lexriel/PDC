#include <stdio.h>

#include "list.h"
#include "tree.h"



void
printInt (void *v)
{
  printf ("(%d)->",*((int*)v));
}

void
printIntTree (tree_t mytree)
{
  treeiterator_t ti;
  list_t nodes;
  listiterator_t li;
  ti = getTreeIterator (mytree);
  if (!ti)
    return;
  nodes = newList (sizeof(treeiterator_t));
  addListValue (nodes,&ti);
  ti = NULL;
  addListValue (nodes,&ti);
  /* browse nodes */
  li = getListIterator (nodes);
  while ( li )
    {
      listiterator_t i;
      int cpt;
      cpt = 0;
      i = li;
      while ( getListIteratorValue(i) != NULL )
        {
          cpt ++;
          nextListIterator (&i);
        }
      if (cpt)
        while ( i != li )
          {
            /* TODO */
            nextListIterator (&li);
          }
      else
        li = NULL;
    }
}

int
main (int argc, char *argv[])
{
  {
    list_t mylist;
    listiterator_t myiterator;
    int c;
    mylist = NULL;
    myiterator = NULL;


    printf ("list -> %p\n",(void*)mylist);
    printf ("print list :\n");
    printList (mylist,printInt); printf ("\n");
    mylist = newList (sizeof(int));
    printf ("new list -> %p\n",(void*)mylist);
    printf ("list size -> %d\n",getListSize(mylist));
    printf ("print list :\n");
    printList (mylist,printInt); printf ("\n");

    c = 400;
    printf ("add value %d -> %d\n",c,addListValue (mylist,&c));
    c = 455;
    printf ("add value %d -> %d\n",c,addListValue (mylist,&c));
    c = 500;
    printf ("add value %d -> %d\n",c,addListValue (mylist,&c));



    printf ("iterator -> %p\n",(void*)myiterator);
    printf ("get value -> %s\n","SEGFAULT");
    myiterator = getListIterator (mylist);
    printf ("get iterator -> %p\n",(void*)myiterator);
    printf ("get value -> %d\n",
            *(int*)(getListIteratorValue (myiterator)));

    printf ("next iterator -> %p\n",
            (void*)(nextListIterator (&myiterator)));
    printf ("get value -> %d\n",
            *(int*)(getListIteratorValue (myiterator)));

  
    printf ("print list :\n");
    printList (mylist,printInt); printf ("\n");


    printf ("remove at 5 -> %d\n",removeListValueAt (&mylist,5));
    printf ("remove at 2 -> %d\n",removeListValueAt (&mylist,2));
    printf ("print list :\n");
    printList (mylist,printInt); printf ("\n");


    deleteList (&mylist);
    printf ("delete list -> %p\n",(void*)mylist);

  }




  printf ("\n\n\n\n");
  {
    list_t l,l2,l3,l4;
    int c;
    
    l = l2 = l3 = l4 = NULL;


    printf ("list -> %p\n",(void*)l);
    l = newListFreeFun (sizeof(list_t),clearList);
    printf ("new list list -> %p\n",(void*)l);

    printf ("list -> %p\n",(void*)l2);
    l2 = newList (sizeof(int));
    printf ("new int list -> %p\n",(void*)l2);

    printf ("list -> %p\n",(void*)l3);
    l3 = newList (sizeof(int));
    printf ("new int list -> %p\n",(void*)l3);

    printf ("list -> %p\n",(void*)l4);
    l4 = newList (sizeof(int));
    printf ("new int list -> %p\n",(void*)l4);


    c = 1;
    printf ("add l2 value %d -> %d\n",c,addListValue (l2,&c));
    c = 2;
    printf ("add l3 value %d -> %d\n",c,addListValue (l3,&c));
    c = 3;
    printf ("add l2 value %d -> %d\n",c,addListValue (l2,&c));
    {
      int i;
      for (i=0;i<6;i++)
        {
          c = i*13;
          addListValue(l4,&c);
        }
    }
    printf ("list size -> %d\n",getListSize(l));
    printf ("list2 size -> %d\n",getListSize(l2));
    printf ("list3 size -> %d\n",getListSize(l3));
    printf ("list4 size -> %d\n",getListSize(l4));

    printf ("add l list -> %d\n",addListValue (l,&l2));
    printf ("add l list -> %d\n",addListValue (l,&l3));
    printf ("add l list -> %d\n",addListValue (l,&l4));
    printf ("list size -> %d\n",getListSize(l));

    printf ("print list of int list\n");
    {
      listiterator_t i;
      int cpt;
      cpt = 0;
      i = getListIterator (l);
      do {
        printf ("i%d: ",cpt++);
        printList (*(list_t*)(getListIteratorValue (i)),printInt);
        printf ("\n");
      }while(nextListIterator (&i));
    }

    clearList (&l);
    printf ("delete list -> %p\n",(void*)l);
  }

  printf ("\n\n\n\n");
  {
    tree_t mytree;
    treeiterator_t myiterator;
    int c;
    mytree = NULL;
    myiterator = NULL;


    printf ("tree -> %p\n",(void*)mytree);
    mytree = newTree (sizeof(int));
    printf ("new tree -> %p\n",(void*)mytree);

    c = 80085;
    printf ("set root %d -> %d\n",c,setTreeRootValue (&mytree,&c));



    printf ("iterator -> %p\n",(void*)myiterator);
    printf ("get value -> %s\n","SIGSEGV");
    myiterator = getTreeIterator (mytree);
    printf ("get iterator -> %p\n",(void*)myiterator);
    printf ("get value -> %d\n",
            *(int*)(getTreeIteratorValue (myiterator)));

    c = 400;
    printf ("add son %d -> %d\n",c,
            addTreeIteratorSonValue (mytree,myiterator,&c));
    c = 300;
    printf ("add son %d -> %d\n",c,
            addTreeIteratorSonValue (mytree,myiterator,&c));
    c = 200;
    printf ("add son %d -> %d\n",c,
            addTreeIteratorSonValue (mytree,myiterator,&c));
    printf ("nb sons -> %d\n",getTreeIteratorSonsNumber (myiterator));
    
  

    deleteTree (&mytree);
    printf ("delete tree -> %p\n",(void*)mytree);



  }

  return 0;
}
